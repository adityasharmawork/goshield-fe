import { NextRequest, NextResponse } from 'next/server';

/**
 * A mock function to simulate the validation of a client-side challenge token.
 * In a real application, this would involve a secret key to decrypt and verify a token
 * generated by a service like hCaptcha, reCAPTCHA, or a custom-built challenge.
 * * @param token - The challenge token sent from the client.
 * @returns A promise that resolves to true if the token is valid, false otherwise.
 */
const validateChallengeToken = async (token: string | undefined): Promise<boolean> => {
  if (!token) {
    return false;
  }
  // Simulate a network call to a CAPTCHA verification service.
  await new Promise(resolve => setTimeout(resolve, 50)); // ~50ms latency
  
  // A real implementation would make an API call like:
  // const response = await fetch('https://hcaptcha.com/siteverify', { ... });
  
  // For this dummy service, we'll accept any token that starts with 'valid-token-'.
  return token.startsWith('valid-token-');
};


export async function POST(req: NextRequest) {
  try {
    const { challengeToken } = await req.json();
    const ip = (req.headers.get('x-forwarded-for') ?? '127.0.0.1').split(',')[0];

    console.log(`[Bot Protection] Verifying challenge for IP: ${ip}`);

    const isHuman = await validateChallengeToken(challengeToken);

    if (!isHuman) {
      console.warn(`[SECURITY ALERT] Bot detected from IP: ${ip}. Challenge failed.`);
      return NextResponse.json(
        { 
          message: 'Bot verification failed. Please complete the challenge.',
          errorCode: 'BOT_DETECTED',
        }, 
        { status: 401 } // 401 Unauthorized is suitable here.
      );
    }

    console.log(`[Bot Protection] Human user verified for IP: ${ip}.`);
    return NextResponse.json(
      { 
        message: 'Human verification successful.',
        status: 'VERIFIED_HUMAN',
      }, 
      { status: 200 }
    );
  } catch (error) {
    console.error('[Bot Protection] Error processing request:', error);
    return NextResponse.json(
      { 
        message: 'Invalid request format.',
        errorCode: 'BAD_REQUEST',
      }, 
      { status: 400 }
    );
  }
}